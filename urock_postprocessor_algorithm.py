# -*- coding: utf-8 -*-

"""
/***************************************************************************
 URockPostprocessor
                                 A QGIS plugin
 Post process results of URock plugin
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-01-19
        copyright            : (C) 2022 by Jérémy Bernard, University of Gothenburg
        email                : jeremy.bernard@zaclys.net
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Jérémy Bernard, University of Gothenburg'
__date__ = '2022-01-19'
__copyright__ = '(C) 2022 by Jérémy Bernard, University of Gothenburg'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

from qgis.PyQt.QtCore import QCoreApplication
from qgis.core import (QgsProcessing,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterField,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterNumber,
                       QgsProcessingParameterMatrix,
                       QgsProcessingParameterFolderDestination,
                       QgsProcessingParameterString,
                       QgsProcessingParameterRasterLayer,
                       QgsProcessingParameterBoolean,
                       QgsRasterLayer,
                       QgsVectorLayer,
                       QgsProject,
                       QgsProcessingContext,
                       QgsProcessingParameterEnum,
                       QgsProcessingParameterFile)
from qgis.utils import iface
import os
from pathlib import Path
import matplotlib.pylab as plt

from urock_processing.H2gisConnection import getJavaDir, setJavaDir, saveJavaDir
from .urock_postprocessor_functions import plotSectionalViews


class URockPostprocessorAlgorithm(QgsProcessingAlgorithm):
    """
    This is an example algorithm that takes a vector layer and
    creates a new identical one.

    It is meant to be used as an example of how to create your own
    algorithms and explain methods and variables used to do it. An
    algorithm like this will be available in all elements, and there
    is not need for additional work.

    All Processing algorithms should extend the QgsProcessingAlgorithm
    class.
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    # Input variables
    JAVA_PATH = "JAVA_PATH"
    INPUT_LINES = 'INPUT_LINES'
    ID_FIELD_LINES = "ID_FIELD_LINES"
    INPUT_WIND_FILE = 'INPUT_WIND_FILE'
    IS_STREAM = 'IS_STREAM'
    SHOW_PLOT = 'SHOW_PLOT'
    SAVE_PLOT = 'SAVE_PLOT'
    OUTPUT_DIRECTORY = 'OUTPUT_DIRECTORY'
    SIMULATION_NAME = "SIMULATION_NAME"
    
    # Close all existing matplotlib windows to avoid memory consumption
    plt.close("all")

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """
        # Get the plugin directory to save some useful files
        plugin_directory = self.plugin_dir = os.path.dirname(__file__)
        
        # Get the default value of the Java environment path if already exists
        javaDirDefault = getJavaDir(plugin_directory)
        
        # Inform the user that the Java version should be 64 bits
        if "Program Files (x86)" in javaDirDefault:
            iface.ValueError(""""Only a 32 bits version of Java has been found \
                             on your computer. Please consider installing Java 64 bits.""")
        else:
            # Set a Java dir if not exist and save it into a file in the plugin repository
            setJavaDir(javaDirDefault)
            saveJavaDir(javaPath = javaDirDefault,
                        pluginDirectory = plugin_directory)

        # We add the input vector features source. It can have only lines
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.INPUT_LINES,
                self.tr('Input layer'),
                [QgsProcessing.TypeVectorLine]
            )
        )
        self.addParameter(
            QgsProcessingParameterField(
                self.ID_FIELD_LINES,
                self.tr('Lines ID field'),
                None,
                self.INPUT_LINES,
                QgsProcessingParameterField.Numeric))
        # We add the input wind speed saved in a NetCDF format
        self.addParameter(
            QgsProcessingParameterFile(
                self.INPUT_WIND_FILE,
                self.tr('Input wind data file (.nc)'),
                extension='nc'))

        # Booleans to let the user decide the type of plotting (stream or arrows),
        # if he wants to display the plots and if he wants 
        # to save them directly to the output directory
        self.addParameter(
            QgsProcessingParameterBoolean(
                self.IS_STREAM,
                self.tr("Tick if you want the figure using streams instead of arrows"),
                defaultValue=False))
        self.addParameter(
            QgsProcessingParameterBoolean(
                self.SHOW_PLOT,
                self.tr("Display the figure(s)"),
                defaultValue=True))
        self.addParameter(
            QgsProcessingParameterBoolean(
                self.SAVE_PLOT,
                self.tr("Save the figure(s)"),
                defaultValue=False))
        self.addParameter(
            QgsProcessingParameterString(
                self.SIMULATION_NAME,
                self.tr('Name of the simulation used for saving figure(s)'),
                "",
                False,
                True)) 
        self.addParameter(
            QgsProcessingParameterFolderDestination(
                self.OUTPUT_DIRECTORY,
                self.tr('Directory to save the figure(s)'),
                defaultValue = '',
                optional = True))
        
        # Optional parameter
        self.addParameter(
            QgsProcessingParameterString(
                self.JAVA_PATH,
                self.tr('Java environment path (should be set automatically'),
                javaDirDefault,
                False,
                False)) 

    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """
        # Get the plugin directory to save some useful files
        plugin_directory = self.plugin_dir = os.path.dirname(__file__)

        # Defines java environmenet variable
        javaEnvVar = self.parameterAsString(parameters, self.JAVA_PATH, context)
                
        # Defines path of the NetCDF file
        inputWindFile = self.parameterAsString(parameters, self.INPUT_WIND_FILE, context)
        
        # Get line layer, id field name and then file directory and crs
        inputLines = self.parameterAsVectorLayer(parameters, self.INPUT_LINES, context)
        idLines = self.parameterAsString(parameters, self.ID_FIELD_LINES, context)
        lines_file = str(inputLines.dataProvider().dataSourceUri())
        if lines_file.count("|") > 0:
            lines_file = lines_file.split("|")[0]
        srid_lines = inputLines.crs().srsid()

        # Defines outputs
        isStream = self.parameterAsBool(parameters, self.IS_STREAM, context)
        showPlot = self.parameterAsBool(parameters, self.SHOW_PLOT, context)
        savePlot = self.parameterAsBool(parameters, self.SAVE_PLOT, context)
        simulationName = self.parameterAsString(parameters, self.SIMULATION_NAME, context)
        outputDirectory = self.parameterAsString(parameters, self.OUTPUT_DIRECTORY, context)
        
        # Creates the output folder if it does not exist
        if not os.path.exists(outputDirectory) and outputDirectory != '':
            if os.path.exists(Path(outputDirectory).parent.absolute()):
                os.mkdir(outputDirectory)
            else:
                feedback.pushInfo('The output directory does not exist, neither its parent directory')
        
        # Start the postprocessor
        plotSectionalViews(pluginDirectory = plugin_directory, 
                            inputWindFile = inputWindFile,
                            lines_file = lines_file,
                            srid_lines = srid_lines,
                            idLines = idLines, 
                            isStream = isStream,
                            savePlot = savePlot,
                            outputDirectory = outputDirectory,
                            simulationName = simulationName)
        if showPlot:
            plt.show()
        
        # Return the results of the algorithm.
        return {self.OUTPUT_DIRECTORY: outputDirectory}

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'URock postprocessor '

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return ''

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return URockPostprocessorAlgorithm()
